//leetcode 99.
//

// do a simple inorder traversal ..use the feature that it gives in increasing order.
// check wherere prev is greater than the curr root...if this is the first then store in prev in first and root in middle ..search for second wrong root
// if you got when swap ..if not then ..swap with middle ..i.e adjacent root are wrond.

class Solution {
    private TreeNode first;
    private TreeNode last;
    private TreeNode prev;
    private TreeNode middle;
  
  private  void inorder(TreeNode root){

    if(root==null) return;

    inorder(root.left);

    if(prev!=null && prev.val>root.val){
        if(first==null)
        {
          first=prev;
          middle=root;
        }
        else
          last=root;
  }
    prev=root;
    inorder(root.right);
  
  }

    public void recoverTree(TreeNode root) {
        first=middle=last=null;
        prev=new TreeNode(Integer.MIN_VALUE);
        inorder(root);

        //if first and last variable has a value , swap them

     if(first!=null && last!=null){
        int temp=first.val;
        first.val=last.val;
        last.val=temp;
     }       
     //if no last elemne t is found. i.e adjecant nodes has to be swapped.
     else if(first!=null && middle!=null){
         int temp=first.val;
        first.val=middle.val;
        middle.val=temp;
     } 

    }
}